name: Release

on:
    push:
        tags:
            - "v*"
    workflow_dispatch:
        inputs:
            tag:
                description: "Optional tag name (must start with v) when running manually"
                required: false
            version:
                description: "Override CLI version string (defaults to tag sans v prefix)"
                required: false

permissions:
    contents: write

concurrency:
    group: gar-release-${{ github.ref || inputs.tag }}
    cancel-in-progress: true

env:
    GO_VERSION: "1.25.x"

jobs:
    prepare:
        name: Prepare metadata
        runs-on: ubuntu-latest
        outputs:
            tag: ${{ steps.meta.outputs.tag }}
            version: ${{ steps.meta.outputs.version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - name: Determine release version
              id: meta
              shell: bash
              env:
                  INPUT_TAG: ${{ github.ref_name || inputs.tag }}
                  INPUT_VERSION: ${{ inputs.version }}
              run: |
                  set -euo pipefail
                  if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
                    TAG="${INPUT_TAG}"
                    if [[ -z "${TAG}" ]]; then
                      echo "::error ::Input 'tag' must be provided when dispatching manually" >&2
                      exit 1
                    fi
                  else
                    TAG="${GITHUB_REF_NAME}"
                  fi

                  if [[ "${TAG}" != v* ]]; then
                    echo "::error ::Tag '${TAG}' must start with 'v'" >&2
                    exit 1
                  fi

                  VERSION_OVERRIDE="${INPUT_VERSION}"
                  if [[ -n "${VERSION_OVERRIDE}" ]]; then
                    VERSION="${VERSION_OVERRIDE}"
                  else
                    VERSION="${TAG#gar-}"
                  fi

                  echo "tag=${TAG}" >> "${GITHUB_OUTPUT}"
                  echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"

    build:
        name: Build binaries
        needs: prepare
        runs-on: ubuntu-latest
        if: needs.prepare.outputs.version != ''
        strategy:
            matrix:
                include:
                    - goos: linux
                      goarch: amd64
                      archive: tar.gz
                      binary_suffix: ""
                    - goos: linux
                      goarch: arm64
                      archive: tar.gz
                      binary_suffix: ""
                    - goos: darwin
                      goarch: amd64
                      archive: zip
                      binary_suffix: ""
                    - goos: darwin
                      goarch: arm64
                      archive: zip
                      binary_suffix: ""
                    - goos: windows
                      goarch: amd64
                      archive: zip
                      binary_suffix: ".exe"
                    - goos: windows
                      goarch: arm64
                      archive: zip
                      binary_suffix: ".exe"
        env:
            VERSION: ${{ needs.prepare.outputs.version }}
            TAG_NAME: ${{ needs.prepare.outputs.tag }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v6
              with:
                  go-version-file: go.mod
                  cache: true

            - name: Build CLI binary
              id: build
              shell: bash
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
                  ARCHIVE: ${{ matrix.archive }}
                  BINARY_SUFFIX: ${{ matrix.binary_suffix }}
              run: |
                  set -euo pipefail
                  BINARY_NAME="gar${BINARY_SUFFIX}"
                  COMMIT_HASH="$(git rev-parse HEAD)"
                  BUILD_TIMESTAMP="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

                  mkdir -p build
                  CGO_ENABLED=0 GOOS="${GOOS}" GOARCH="${GOARCH}" \
                    go build -trimpath -ldflags "-s -w -X github.com/cubetiqlabs/gar/pkg/version.Version=${VERSION} -X github.com/cubetiqlabs/gar/pkg/version.Commit=${COMMIT_HASH} -X github.com/cubetiqlabs/gar/pkg/version.BuildTime=${BUILD_TIMESTAMP}" \
                    -o "build/${BINARY_NAME}" ./cmd/gar

                  ARCHIVE_NAME="gar_${GOOS}_${GOARCH}"
                  mkdir -p release
                  case "${ARCHIVE}" in
                    zip)
                      (cd build && zip -q "../release/${ARCHIVE_NAME}.zip" "${BINARY_NAME}")
                      ARTIFACT_PATH="release/${ARCHIVE_NAME}.zip"
                      ;;
                    tar.gz)
                      tar -C build -czf "release/${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}"
                      ARTIFACT_PATH="release/${ARCHIVE_NAME}.tar.gz"
                      ;;
                    *)
                      echo "::error ::Unsupported archive format '${ARCHIVE}'" >&2
                      exit 1
                      ;;
                  esac

                  echo "artifact_path=${ARTIFACT_PATH}" >> "${GITHUB_OUTPUT}"
                  echo "archive_name=${ARCHIVE_NAME}" >> "${GITHUB_OUTPUT}"

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ steps.build.outputs.archive_name }}
                  path: ${{ steps.build.outputs.artifact_path }}
                  if-no-files-found: error

    release:
        name: Publish GitHub release
        needs: [prepare, build]
        runs-on: ubuntu-latest
        steps:
            - name: Download artifacts
              uses: actions/download-artifact@v5
              with:
                  path: dist
                  merge-multiple: true

            - name: Generate checksums
              shell: bash
              working-directory: dist
              run: |
                  set -euo pipefail
                  shasum -a 256 * > SHA256SUMS

            - name: Create release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ needs.prepare.outputs.tag }}
                  name: GoArchive (gar) ${{ needs.prepare.outputs.version }}
                  files: |
                      dist/*
                  generate_release_notes: true
                  prerelease: ${{ contains(needs.prepare.outputs.version, '-') }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
